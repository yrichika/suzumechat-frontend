# https://docs.github.com/en/actions/deployment/deploying-to-your-cloud-provider/deploying-to-amazon-elastic-container-service#creating-the-workflow
# https://github.com/actions/starter-workflows/blob/main/deployments/aws.yml
# name: SuzumeChat Front Prod CI

# on:
#   push:
#     branches: ["main"]

# env:
#   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#   AWS_ASSUME_ROLE_ARN: ${{ secrets.PROD_AWS_ASSUME_ROLE_ARN }}
#   ECS_CONTAINER_NAME: ${{ secrets.PROD_ECS_CONTAINER_NAME }} # task-definition-template.json: `containerDefinitions.name`
#   ECS_TASK_ROLE_ARN: ${{ secrets.PROD_ECS_TASK_ROLE_ARN }}
#   ECS_EXEC_ROLE_ARN: ${{ secrets.PROD_ECS_EXEC_ROLE_ARN }}
#   ECS_FAMILY: ${{ secrets.PROD_ECS_FAMILY }}
#   ECS_LOGS_GROUP: ${{ secrets.PROD_ECS_LOGS_GROUP }}
#   ECS_CLUSTER: ${{ secrets.PROD_ECS_CLUSTER_NAME }}
#   ECS_SERVICE: ${{ secrets.PROD_ECS_SERVICE_NAME }}
#   ECR_REPOSITORY: ${{ secrets.PROD_ECR_REPO_NAME }}
#   ECS_TASK_DEFINITION: .aws/task-definition.json
#   ECS_TASK_DEFINITION_TEMPLATE: .aws/task-definition-template.json
 

# jobs:
#   build:
#     runs-on: ubuntu-latest

#     strategy:
#       matrix:
#         node-version: [ 18 ]
#     steps:
#     - uses: actions/checkout@v3

#     - name: Use Node.js ${{ matrix.node-version }}
#       uses: actions/setup-node@v3
#       with:
#         node-version: ${{ matrix.node-version }}
#     - name: Build
#       run: |
#         npm install -g yarn
#         yarn install --frozen-lockfile
#         yarn build

#     - name: Configure AWS Credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
#         aws-region: ap-northeast-1
#         role-to-assume: ${{ env.AWS_ASSUME_ROLE_ARN }}
#         role-duration-seconds: 1800 # 1800sec == 30min
    
#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1
    
#     - name: Build, tag, and push image to ECR
#       id: build-image
#       env:
#         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         IMAGE_TAG: ${{ github.sha }}
#       run: |
#         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
#         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
#         echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

#     # env variables in `sed` NEED TO BE ESCAPED!
#     - name: Create task-definition.json
#       run: |
#         sed -e "s/<family>/$ECS_FAMILY/g" \
#           -e "s/<taskRoleArn>/$ECS_TASK_ROLE_ARN/g" \
#           -e "s/<executionRoleArn>/$ECS_EXEC_ROLE_ARN/g" \
#           -e "s/<containerName>/$ECS_CONTAINER_NAME/g" \
#           -e "s/<awslogs-group>/$ECS_LOGS_GROUP/g" $ECS_TASK_DEFINITION_TEMPLATE > $ECS_TASK_DEFINITION
#         echo "created task-definition.json."

#     - name: Fill in the new image ID in the Amazon ECS task definition
#       id: task-def
#       uses: aws-actions/amazon-ecs-render-task-definition@97587c9d45a4930bf0e3da8dd2feb2a463cf4a3a
#       with:
#         task-definition: ${{ env.ECS_TASK_DEFINITION }}
#         container-name: ${{ env.ECS_CONTAINER_NAME }}
#         image: ${{ steps.build-image.outputs.image }}

#     - name: Deploy Amazon ECS task definition
#       uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.11
#       with:
#         task-definition: ${{ steps.task-def.outputs.task-definition }}
#         service: ${{ env.ECS_SERVICE }}
#         cluster: ${{ env.ECS_CLUSTER }}
#         wait-for-service-stability: true
